Question 1: Java 1D Array

import java.util.*;

public class Solution {

    public static void main(String[] args) {
	   
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int a[]=new int[n];
        for(int i=0;i<n;i++)
        {
            a[i]=scan.nextInt();
        }
        scan.close();

        // Prints each sequential element in array a
        for (int i = 0; i < a.length; i++) {
            System.out.println(a[i]);
        }
    }
}


Question 2: Java 2D Array

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        List<List<Integer>> arr = new ArrayList<>();

        for (int i = 0; i < 6; i++) {
            String[] arrRowTempItems = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

            List<Integer> arrRowItems = new ArrayList<>();

            for (int j = 0; j < 6; j++) {
                int arrItem = Integer.parseInt(arrRowTempItems[j]);
                arrRowItems.add(arrItem);
            }

            arr.add(arrRowItems);
        }

        bufferedReader.close();
        int m=Integer.MIN_VALUE;
        for(int i=1;i<5;i++)
        {
            for(int j=1;j<5;j++)
            {
                m=Math.max(m,arr.get(i).get(j)+arr.get(i-1).get(j)+arr.get(i+1).get(j)+arr.get(i-1).get(j-1)+arr.get(i-1).get(j+1)+arr.get(i+1).get(j-1)+arr.get(i+1).get(j+1));
            }
        }
        System.out.println(m);
    }
}


Question 3: Java Subarray

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner inp=new Scanner(System.in);
        int n=inp.nextInt();
        int a[]=new int[n];
        for(int i=0;i<n;i++)
        a[i]=inp.nextInt();
        int f=0;
        for(int i=0;i<n;i++)
        {
            int c=0;
            for(int j=i;j<n;j++)
            {
                c+=a[j];
                if(c<0)
                f+=1;
            }
        }
        System.out.println(f);
    }
}


Question 4: Java Arraylist

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner inp=new Scanner(System.in);
        int t=inp.nextInt();
        ArrayList<ArrayList<Integer>> l=new ArrayList<>();
        while(t-->0)
        {
            int n=inp.nextInt();
            ArrayList<Integer> a=new ArrayList<>();
            for(int i=0;i<n;i++)
            a.add(inp.nextInt());
            l.add(a);
        }
        int q=inp.nextInt();
        for(int j=0;j<q;j++)
        {
            int x=inp.nextInt()-1;
            int y=inp.nextInt()-1;
            if(x<l.size())
            {
                if(y<l.get(x).size())
                System.out.println(l.get(x).get(y));
                else
                System.out.println("ERROR!");
            }
            else
            System.out.println("ERROR!");
        }
    }
}


Question 5: Java 1D Array (Part 2)


import java.util.*;
public class Solution {
    public static boolean Solvable (int ind,int k,int[] arr){
        if ( ind >= arr.length)
            return true;
        if ( ind<0 || arr[ind] ==1)
            return false;
        arr[ind] = 1;
        return Solvable(ind + k,k,arr) || Solvable(ind + 1,k,arr) || Solvable(ind - 1,k,arr);
    }
    public static boolean canwin(int leap, int[] game) {
        return Solvable(0, leap, game);    
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        while (q-- > 0) {
            int n = sc.nextInt();
            int leap = sc.nextInt();
            
            int[] g = new int[n];
            for (int i = 0; i < n; i++) {
                game[i] = sc.nextInt();
            }
            System.out.println( (canwin(leap, g)) ? "YES" : "NO" );
        }
    }
}


Question 6: Java List

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner inp=new Scanner(System.in);
        int n=inp.nextInt();
        ArrayList<Integer> a=new ArrayList<>();
        for(int i=0;i<n;i++)
        a.add(inp.nextInt());
        int q=inp.nextInt();
        for(int i=0;i<q;i++)
        {
            String s=inp.next();
            if(s.compareTo("Insert")==0)
            {
                int x=inp.nextInt();
                int y=inp.nextInt();
                a.add(x,y);
            }
            else
            {
                int x=inp.nextInt();
                a.remove(x);
            }
        }
        for(int i: a)
        System.out.print(i+" ");
        System.out.println();
    }
}



Question 7: Java Stack

import java.util.*;
class Solution{
	
	public static void main(String []argh)
	{
		Scanner sc = new Scanner(System.in);
		
		while (sc.hasNext()) {
			String s=sc.next();
            int f=1;
            Stack<Character> st=new Stack<>();
            for(int i=0;i<s.length();i++)
            {
                if("{[(".contains(s.charAt(i)+""))
                st.push(s.charAt(i));
                else
                {
                    if(st.isEmpty())
                    {
                        f=0;
                        System.out.println(false);
                        break;
                    }
                    else
                    {
                        char d=st.peek();
                        if(s.charAt(i)=='}'  && d=='{')
                        st.pop();
                        else if(s.charAt(i)==')'  && d=='(')
                        st.pop();
                        else if(s.charAt(i)==']'  && d=='[')
                        st.pop();
                        else{
                            f=0;
                            System.out.println(false);
                            break;
                        }
                    }
                }
            }
            if(f==1 && st.isEmpty())
            System.out.println(true);
            else if(f==1)
            System.out.println(false);
        }
	}
}



Question 8: Java Hashset

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

 public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        int t = s.nextInt();
        String [] pair_left = new String[t];
        String [] pair_right = new String[t];
        
        for (int i = 0; i < t; i++) {
            pair_left[i] = s.next();
            pair_right[i] = s.next();
        }

//Write your code here
    
    HashSet<HashMap<String,String>> hs=new HashSet<>();
    for(int i=0;i<t;i++)
    {
        HashMap<String,String> hm=new HashMap<>();
        hm.put(pair_left[i],pair_right[i]);
        hs.add(hm);
        System.out.println(hs.size());
    }
    }
}


Question 9: Java Comparator


import java.util.*;
class Checker implements Comparator<Player>{
    public int compare(Player x, Player y){
        if(x.score == y.score){ 
            return x.name.compareTo(y.name);
        }
        if(x.score > y.score)
            return -1;
        return 1;
    }
}
class Player{
    String name;
    int score;
    
    Player(String name, int score){
        this.name = name;
        this.score = score;
    }
}
class Solution {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        Player[] player = new Player[n];
        Checker checker = new Checker();        
        for(int i = 0; i < n; i++){
            player[i] = new Player(scan.next(), scan.nextInt());
        }
        scan.close();     
        Arrays.sort(player, checker);
        for(int i = 0; i < player.length; i++){
            System.out.printf("%s %s\n", player[i].name, player[i].score);
        }
    }
}




Question 10: Java Generics

import java.io.IOException;
import java.lang.reflect.Method;

class Printer
{
    public static < E > void printArray(E[] elements) {  
        for ( E element : elements)
        {          
            System.out.println(element);  
        }   
    } 
}

public class Solution {


    public static void main( String args[] ) {
        Printer myPrinter = new Printer();
        Integer[] intArray = { 1, 2, 3 };
        String[] stringArray = {"Hello", "World"};
        myPrinter.printArray(intArray);
        myPrinter.printArray(stringArray);
        int count = 0;

        for (Method method : Printer.class.getDeclaredMethods()) {
            String name = method.getName();

            if(name.equals("printArray"))
                count++;
        }

        if(count > 1)System.out.println("Method overloading is not allowed!");
      
    }
}


Question 11: Java Sort

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner inp=new Scanner(System.in);
        int n=inp.nextInt();
        TreeMap<Double,ArrayList<String>> tm=new TreeMap<>();
        for(int i=0;i<n;i++)
        {
            int id=inp.nextInt();
            String s=inp.next();
            double sc=inp.nextDouble();
            if(tm.containsKey(sc))
            tm.get(sc).add(s);
            else
            {
                ArrayList<String> a=new ArrayList<>();
                a.add(s);
                tm.put(sc,a);
            }
        }
        for(double i: tm.descendingKeySet())
        {
            ArrayList<String> a=tm.get(i);
            Collections.sort(a);
            tm.put(i,a);
            for(String j: tm.get(i))
            System.out.println(j);
        }
    }
}



Question 12: Java Dequeue

    import java.util.*;
    public class test {
        public static void main(String[] args) {
            Scanner in = new Scanner(System.in);
            ArrayList<Integer> a=new ArrayList<>();
            HashMap<Integer,Integer> hm=new HashMap<>();
            int n = in.nextInt();
            int m = in.nextInt();
            int r=0;
            for (int i = 0; i < n; i++) {
                int num = in.nextInt();
                a.add(num);
            }
            for(int i=0;i<m;i++)
            {
                if(hm.containsKey(a.get(i)))
                hm.put(a.get(i),hm.get(a.get(i))+1);
                else
                hm.put(a.get(i),1);
            }
            r=Math.max(r,hm.size());
            int j=0;
            for(int i=m;i<n;i++)
            {
                if(hm.containsKey(a.get(i)))
                hm.put(a.get(i),hm.get(a.get(i))+1);
                else
                hm.put(a.get(i),1);
                if(hm.containsKey(a.get(j)))
                {
                    if(hm.get(a.get(j))==1)
                    hm.remove(a.get(j));
                    else
                    hm.put(a.get(j),hm.get(a.get(j))-1);
                }
                r=Math.max(r,hm.size());
                j+=1;
            }
            System.out.println(r);
        }
    }



Question 13: Java BitSet

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
    int N = scan.nextInt();
    int M = scan.nextInt();
    String[] opr = new String[M];
    int[] s1 = new int[M];
    int[] s2 = new int[M];
    for(int i=0; i<M; i++){
        opr[i] = scan.next();
        s1[i] = scan.nextInt();
        s2[i] = scan.nextInt();
    }
    BitSet B1 = new BitSet(N);
    BitSet B2 = new BitSet(N);
   for(int i=0; i<M; i++){
        switch(opr[i]){
            case "AND":
            if(s1[i] == 1)
                B1.and(B2);
            else
                B2.and(B1);
            break;

            case "OR":
            if(s1[i] == 1)
                B1.or(B2);
            else
                B2.or(B1);
            break;

            case "XOR":
            if(s1[i] == 1)
                B1.xor(B2);
            else
                B2.xor(B1);
            break;

            case "FLIP":
            if(s1[i] == 1)
                B1.flip(s2[i]);
            else
                B2.flip(s2[i]);
            break;

            case "SET":
            if(s1[i] == 1)
                B1.set(s2[i], true);
            else
                B2.set(s2[i], true);
            break;
        }
   System.out.println(B1.cardinality() + " " + B2.cardinality());
    }
    }
}


Question 14: Java Priority Queue


import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.*;
class Priorities{   
    public List<Student> getStudents(List<String> events){
        PriorityQueue<Student> pq = new PriorityQueue<>();        
        for (String str : events) {
            String[] event =str.split(" ");            
            switch(event[0]){
                case "ENTER":{                                       
                    String name= event[1];
                    int id= Integer.valueOf(event[3]);
                    double cgpa= Double.valueOf(event[2]); 
                    Student student = new Student(id,name,cgpa );
                    pq.add(student);
                    break;                  
                }
                case "SERVED":{
                    pq.poll();
                    break;
                }
            }
        }
        ArrayList<Student> temp = new ArrayList<>();
        while (!pq.isEmpty()) {
            temp.add(pq.poll());
         }
        return temp;
    }
}
class Student implements Comparable<Student>{
    private int id;
    private String name;
    private double cgpa;
    public Student(int id, String name, double cgpa){
        this.id=id;
        this.name=name;
        this.cgpa=cgpa;
    }    
    public int compareTo(Student s){
        if(cgpa==s.getCgpa() && name.compareTo(s.getName())==0) return id-s.getId();
        if(cgpa==s.getCgpa()) return name.compareTo(s.getName());
        if(cgpa>s.getCgpa()) return -1;
         else return 1;  
    }    
    public int getId(){
        return id;
    }
    public String getName(){
        return name;
    }
    public double getCgpa(){
        return cgpa;
    } 
}
public class Solution {
    private final static Scanner scan = new Scanner(System.in);
    private final static Priorities priorities = new Priorities();    
    public static void main(String[] args) {
        int totalEvents = Integer.parseInt(scan.nextLine());    
        List<String> events = new ArrayList<>();        
        while (totalEvents-- != 0) {
            String event = scan.nextLine();
            events.add(event);
        }        
        List<Student> students = priorities.getStudents(events);
        
        if (students.isEmpty()) {
            System.out.println("EMPTY");
        } else {
            for (Student st: students) {
                System.out.println(st.getName());
            }
        }
    }
}



Question 15: Java Substring Comparisons


import java.io.*;
import java.util.*;
public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str = sc.next();
        int k = sc.nextInt();
        String s1 = ""; 
        String s2 = "";
        for(int i=0;i<=str.length()-k;i++){
            int r=i+k;
            String sbt = str.substring(i,r);
            if(sbt.compareTo(s2)>0){
                s2=sbt;
            }
            if(sbt.compareTo(s1)<0){
                s1=sbt;
            }
            if(i==0){
                s1=sbt;
            }
        }
        System.out.println(s1);
        System.out.println(s2);
    }
}




Question 16: Java String Reverse



import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String str=sc.next();
        int f=0;
        for(int i=0;i<str.length()/2;i++){
            if(str.charAt(i)!=str.charAt(str.length()-i-1)){
                f=1;
                break;
            }
        }
        if(f==0)
            System.out.println("Yes");
        else
            System.out.println("No");
    }
}





Question 17: Java Anagrams



import java.io.*;
import java.util.*;
public class Solution {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String a=sc.next();
        String b=sc.next();
        a=a.toLowerCase();
        b=b.toLowerCase();
        char ar[]=a.toCharArray();
        char br[]=b.toCharArray();
        Arrays.sort(ar);
        Arrays.sort(br);
        int f=1;
        if(a.length()==b.length())
        {
            for(int i=0;i<ar.length;i++)
            {
                if(ar[i]!=br[i])
                {
                    f=0;
                    System.out.println("Not Anagrams");
                    break;
                }
            }
            if(f==1)
            System.out.println("Anagrams");
        }
        else
        System.out.println("Not Anagrams");
    }
}





Question 18: Java String Tokens



import java.io.*;
import java.util.*;
public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        ArrayList<String> al=new ArrayList<>();
        String st="";
        for(int i=0;i<str.length();i++)
        {
            char ch=str.charAt(i);
            if(Character.isAlphabetic(ch))
                st+=ch+"";
            else
            {
                if(!st.equals(""))
                    al.add(st);
                st="";
            }
        }
        if(!st.equals(""))
                al.add(st);
        System.out.println(al.size());
        for(String t:al)
            System.out.println(t);
    }
}





Question 19: Pattern Syntax Checker



import java.io.*;
import java.util.*;
import java.util.regex.*;
public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner (System.in);
        String st=sc.nextLine();
        int n = Integer.parseInt(st);
        while (n>0 && sc.hasNextLine()) {
            String exp  = sc.nextLine();
            try {
                Pattern r = Pattern.compile(exp);
                System.out.println("Valid");
            }
            catch (PatternSyntaxException e) {
                System.out.println("Invalid");
            }
        }
    }
}






Question 20: Java Regex



import java.io.*;
import java.util.*;
class MyRegex {
    String pattern = "((([0-1]?[0-9]{1,2})|(2[0-4][0-9])|(25[0-5]))\\.){3}(([0-1]?[0-9]{1,2})|(2[0-4][0-9])|(25[0-5]))";
}
public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        while(sc.hasNext()){
            String str = sc.next();
            System.out.println(str.matches(new MyRegex().pattern));
        }
    }
}





Question 21: Java Regex 2 - Duplicate Words



import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class DuplicateWords {

    public static void main(String[] args) {
 String regex = "\\b(\\w+)(\\s+\\1\\b)+";
    Pattern p = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);

    Scanner in = new Scanner(System.in);
    int numSentences = Integer.parseInt(in.nextLine());

    while (numSentences-- > 0) {
        String input = in.nextLine();

        Matcher m = p.matcher(input);

        // Check for subsequences of input that match the compiled pattern
        while (m.find()) {
            input = input.replaceAll("(?i)"+m.group(), m.group(1));
        }
        // Prints the modified sentence.
        System.out.println(input);
    }

    in.close();
    }
}




Question 22: Valid Username Regular Expression



import java.util.Scanner;
class UsernameValidator {   
    public static final String regularExpression = "[a-zA-Z]\\w{7,29}";
}
public class Solution {
    private static final Scanner sc = new Scanner(System.in);    
    public static void main(String[] args) {
        int n = Integer.parseInt(sc.nextLine());
        while (n-->0) {
            String userName = sc.nextLine();

            if (userName.matches(UsernameValidator.regularExpression)) {
                System.out.println("Valid");
            } else {
                System.out.println("Invalid");
            }           
        }
    }
}



Question 23: Java Primality Test

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        String n = bufferedReader.readLine();
        BigInteger big=new BigInteger(n);
        boolean isPrime=big.isProbablePrime(13);
        System.out.println(isPrime?"prime ":"not prime");
        bufferedReader.close();
    }
}



Question 24: Java Currency Formatter


import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double money = scanner.nextDouble();
        scanner.close();
        String us = NumberFormat.getCurrencyInstance(Locale.US).format(payment); 
        String india = NumberFormat.getCurrencyInstance(new Locale("en", "in")).format(payment); 
        String china = NumberFormat.getCurrencyInstance(Locale.CHINA).format(payment);
        String france = NumberFormat.getCurrencyInstance(Locale.FRANCE).format(payment); 
        System.out.println("US: " + us);
        System.out.println("India: " + india);
        System.out.println("China: " + china);
        System.out.println("France: " + france);
    }
}



Question 25: Java Tag Content Extractor


import java.io.*;
import java.util.*;
import java.util.regex.*;
public class Solution {
    public static void main(String[] args) {
        String regex = "<(.+)>([^<>]+)</(\\1)>";
        Pattern pat = Pattern.compile(regex);
        Scanner sc = new Scanner(System.in);
        int t = Integer.parseInt(sc.nextLine());
        while (t-- > 0) {
            String str = sc.nextLine();
            Matcher mat = pat.matcher(str);
            if (mat.find()) {
                mat.reset();
                while (mat.find()) {
                    System.out.println(mat.group(2));
                }
            } 
            else {
                System.out.println("None");
            }
        }
    }
}
